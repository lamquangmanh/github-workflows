name: Reusable CI/CD for ArgoCD & Kubernetes

on:
  workflow_call:
    inputs:
      app_name:
        description: 'ArgoCD Application Name'
        required: true
        type: string
      environment:
        description: 'Deployment environment (dev, staging, prod)'
        required: true
        type: string
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        type: string
    secrets:
      ARGOCD_SERVER:
        required: true
      ARGOCD_USERNAME:
        required: true
      ARGOCD_PASSWORD:
        required: true
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true

jobs:
  cd-process:
    name: Build and push docker image to GCP Artifact Registry (or Docker-hub)
    runs-on: ubuntu-latest
    # This is option 2: run on the runner of inputs
    # runs-on: ["${{ inputs.RUNNER }}"]

    # Prevents parallel execution of the same workflow on the same branch.
    # If a new workflow run starts for the same branch/ref, the previous run is canceled.
    concurrency:
      group: ${{ github.workflow }}-ci-process-${{ github.ref }}
      cancel-in-progress: true

    # Sets the environment dynamically using a GitHub Action input.
    # This value determines which environment (staging, production, etc.) the workflow is targeting.
    environment: ${{ inputs.environment }}

    steps:
      # Clones the repository into the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Runs a shell script (ci_variables.sh) to set environment variables.
      - name: Prepare Variables
        run: |
          bash ./scripts/ci_variables.sh

      # Uses a Google Cloud service account (stored in secrets.GCP_SERVICE_ACCOUNT_KEY) to authenticate.
      # This allows the workflow to interact with Google services, including Artifact Registry.
      - name: Google Authentication
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      # Installs Google Cloud SDK (gcloud CLI) in the GitHub Actions runner.
      # Required for Docker authentication and pushing images.
      - name: Google CLI
        uses: google-github-actions/setup-gcloud@v1

      # Executes a custom Docker build script (build.sh).
      # This likely builds a Docker image with the application.
      - name: Build Docker Image
        run: ./scripts/build.sh

      # Configures Docker authentication with Google Artifact Registry.
      # Enables the runner to push images to a private Google Cloud container repository.
      - name: Configure Docker for Google Cloud
        run: |-
          gcloud auth configure-docker --quiet
          gcloud auth configure-docker ${{ vars.GCP_REPO_REGION_NAME }} --quiet

      # Creates and pushes Docker images with two different tags:
      # 1. ${{ github.sha }} → A unique image tag based on the commit SHA.
      # 2. ${{ env.PACKAGE_VERSION }} → A versioned tag based on the application's package version.
      # Tagging and Pushing:
      # Tags the built image (temp) with both GCP_IMAGE_LATEST and GCP_IMAGE_CURRENT.
      # Pushes both tagged images to Google Artifact Registry.
      - name: Push Docker Image to Artifact Registry
        run: |-
          GCP_IMAGE_LATEST="${{ vars.GCP_REPO_REGION_NAME }}/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_REPO_NAME }}/${{ inputs.environment }}:${{ github.sha }}"
          GCP_IMAGE_CURRENT="${{ vars.GCP_REPO_REGION_NAME }}/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_REPO_NAME }}/${{ inputs.environment }}:${{ env.PACKAGE_VERSION }}"
          docker tag temp ${GCP_IMAGE_LATEST}
          docker push ${GCP_IMAGE_LATEST}
          docker tag temp ${GCP_IMAGE_CURRENT}
          docker push ${GCP_IMAGE_CURRENT}

  # cd-process:
  #   name: Deploy to Kubernetes via ArgoCD
  #   needs: ci
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout CI/CD Repository
  #       uses: actions/checkout@v4

  #     - name: Install ArgoCD CLI
  #       run: |
  #         curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
  #         chmod +x argocd-linux-amd64
  #         sudo mv argocd-linux-amd64 /usr/local/bin/argocd

  #     - name: Login to ArgoCD
  #       run: |
  #         argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

  #     - name: Update Kubernetes Manifests (Kustomize)
  #       run: |
  #         cd kustomize/overlays/${{ inputs.environment }}
  #         kustomize edit set image my-org/${{ inputs.app_name }}=my-org/${{ inputs.app_name }}:${{ inputs.image_tag || 'latest' }}
  #         kustomize build . > manifests.yaml
  #         git add manifests.yaml
  #         git commit -m "Deploy ${{ inputs.app_name }} to ${{ inputs.environment }} with tag ${{ inputs.image_tag || 'latest' }}"
  #         git push origin main

  #     - name: Sync ArgoCD Application
  #       run: |
  #         argocd app sync ${{ inputs.app_name }} --async
  #         argocd app wait ${{ inputs.app_name }} --health
